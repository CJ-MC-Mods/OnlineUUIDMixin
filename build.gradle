buildscript {
    repositories {
        jcenter()
        mavenLocal()
        maven {
            name = 'gradle-plugins'
            url = 'https://plugins.gradle.org/m2'
        }
        maven {
            name = 'forge'
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
        classpath 'gradle.plugin.org.spongepowered:spongegradle:0.8.1'
    }
}

apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the nessasary things for Forge to be setup.
apply plugin: 'org.spongepowered.mixin'



repositories {
    mavenCentral()
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/maven'
    }
}

configurations {
    embed
    compile.extendsFrom(embed)
}

idea{
    module{
        inheritOutputDirs = false
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}

ext.configFile = file "build.properties"

//repositories  {
//    maven {
//        name 'CB Maven'
//        url "http://chickenbones.net/maven/"
//    }
//}

configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}


version = "${config.mcversion}-${config.mod_version}"
group= "com.cjm721.onlineuuid" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "OnlineUUID"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
    version = "1.12.2-14.23.0.2540"
    runDir = "run"
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20171112"
    replace '${mod_version}', project.config.mod_version
    replaceIn "OnlineUUIDs.java"
    serverRunArgs = ["nogui"]
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

dependencies {
    embed('org.apache.logging.log4j:log4j-core:2.0-beta9')
    embed('org.spongepowered:mixin:0.6.6-SNAPSHOT') {
        exclude module: 'launchwrapper'
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

sourceSets {
    main {
        refMap = "mixins.onlineuuid.refmap.json"
    }
}

jar {
    manifest {
        attributes 'FMLCorePlugin': 'com.cjm721.onlineuuid.CoreMod'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
        attributes 'MixinConfigs': 'mixins.onlineuuid.json'
        attributes 'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker'
        attributes 'TweakOrder': 0
        attributes 'ForceLoadAsMod': true
    }

    from configurations.embed.collect {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        it.isDirectory() ? it : zipTree(it)
    }
}

//shadowJar {
//    mainSpec.sourcePaths.clear()
//    dependsOn reobfJar
//    classifier ''
//    exclude 'dummyThing'
//    dependencies {
//        include dependency('org.spongepowered:mixin')
//    }
//    afterEvaluate {
//        from zipTree(reobfJar.jar)
//    }
//}
